package main

import (
	"context"
	"encoding/json"
	"io/ioutil"
	"log"
	"net/http"
	"time"

	"github.com/gorilla/mux"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

// DB stores the database session information.
// Needs to be initialized once and can be called with defined methods.
// https://www.alexedwards.net/blog/organising-database-access	(2. Dependency injection)
type DB struct {
	collection *mongo.Collection
}

// Movie stores movie information
type Movie struct {
	ID        interface{} `json:"id" bson:"_id,omitempty"` // can be set or autogenerated by mongo, accepts hex value
	Name      string      `json:"name" bson:"name"`
	Year      string      `json:"year" bson:"year"`
	Directors []string    `json:"directors" bson:"directors"`
	Writers   []string    `json:"writers" bson:"writers"`
	BoxOffice BoxOffice   `json:"boxOffice" bson:"boxOffice"`
}

// BoxOffice stores box office information
type BoxOffice struct {
	Budget uint64 `json:"budget" bson:"budget"`
	Gross  uint64 `json:"gross" bson:"gross"`
}

// PostMovie adds a new movie
func (db *DB) PostMovie(w http.ResponseWriter, r *http.Request) {
	var movie Movie
	postBody, _ := ioutil.ReadAll(r.Body)
	json.Unmarshal(postBody, &movie)
	result, err := db.collection.InsertOne(context.TODO(), movie)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		w.Write([]byte(err.Error()))
		return
	}
	w.Header().Set("Content-Type", "application/json")
	response, _ := json.Marshal(result)
	w.WriteHeader(http.StatusOK)
	w.Write(response)
}

// GetMovie fetches a movie with a given ID
func (db *DB) GetMovie(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	var movie Movie
	objectID, _ := primitive.ObjectIDFromHex(vars["id"])
	filter := bson.M{"_id": objectID}
	err := db.collection.FindOne(context.TODO(), filter).Decode(&movie)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		w.Write([]byte(err.Error()))
		return
	}
	w.Header().Set("Content-Type", "application/json")
	response, _ := json.Marshal(movie)
	w.WriteHeader(http.StatusOK)
	w.Write(response)
}

// UpdateMovie modifies a movie with a given ID
func (db *DB) UpdateMovie(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	var movie Movie
	putBody, _ := ioutil.ReadAll(r.Body)
	json.Unmarshal(putBody, &movie)

	objectID, _ := primitive.ObjectIDFromHex(vars["id"])
	filter := bson.M{"_id": objectID}
	update := bson.M{"$set": &movie}
	_, err := db.collection.UpdateOne(context.TODO(), filter, update)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		w.Write([]byte(err.Error()))
		return
	}
	w.Header().Set("Content-Type", "text/plain")
	w.Write([]byte("Updated succesfully!"))
}

// DeleteMovie removes a movie with a given ID
func (db *DB) DeleteMovie(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	objectID, _ := primitive.ObjectIDFromHex(vars["id"])
	filter := bson.M{"_id": objectID}

	_, err := db.collection.DeleteOne(context.TODO(), filter)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		w.Write([]byte(err.Error()))
		return
	}
	w.Header().Set("Content-Type", "text/plain")
	w.Write([]byte("Deleted succesfully!"))
}

func main() {
	clientOptions := options.Client().ApplyURI("mongodb://localhost:27017")
	client, err := mongo.Connect(context.TODO(), clientOptions)
	if err != nil {
		log.Fatalln(err)
	}
	defer client.Disconnect(context.TODO())

	collection := client.Database("appDB").Collection("movies")
	db := &DB{collection: collection}

	r := mux.NewRouter()
	r.HandleFunc("/v1/movies", db.PostMovie).Methods("POST")
	r.HandleFunc("/v1/movies/{id:[a-zA-Z0-9]*}", db.GetMovie).Methods("GET")
	r.HandleFunc("/v1/movies/{id:[a-zA-Z0-9]*}", db.UpdateMovie).Methods("PUT")
	r.HandleFunc("/v1/movies/{id:[a-zA-Z0-9]*}", db.DeleteMovie).Methods("DELETE")

	srv := &http.Server{
		Handler:      r,
		Addr:         "localhost:8080",
		WriteTimeout: 15 * time.Second,
		ReadTimeout:  15 * time.Second,
	}
	log.Fatalln(srv.ListenAndServe())
}

/*
$ bash -x run.sh
+ set -e
+ trap ctrl_c INT
++ pwd
+ docker run --rm --name mongo -p 27017:27017 -v /Users/Viktor_Buchkivskyi/opaq/goweb/ch5/01-gorilla-mongo-api/db:/data/db -d mongo
6de09a3930a09965c7c04598969580aa9c1c3af12d6a621baad7d236495c96c9
+ go run main.go

$ curl -i -w'\n' http://localhost:8080/v1/movies -H 'cache-control: no-cache' -H 'content-type: application/json' -d ' {
  "name" : "The Dark Knight",
  "year" : "2008", "directors" : [ "Christopher Nolan" ],
  "writers" : [ "Jonathan Nolan", "Christopher Nolan" ],
  "boxOffice" : { "budget" : 185000000, "gross" : 533316061 }
}'
HTTP/1.1 200 OK
Content-Type: application/json
Date: Mon, 22 Feb 2021 11:25:15 GMT
Content-Length: 41

{"InsertedID":"6033949b54db119a5b2b30b4"}

$ curl -s -w'\n' http://localhost:8080/v1/movies/6033949b54db119a5b2b30b4 | jq .
{
  "id": "6033949b54db119a5b2b30b4",
  "name": "The Dark Knight",
  "year": "2008",
  "directors": [
    "Christopher Nolan"
  ],
  "writers": [
    "Jonathan Nolan",
    "Christopher Nolan"
  ],
  "boxOffice": {
    "budget": 185000000,
    "gross": 533316061
  }
}

curl -X PUT -i -w'\n' http://localhost:8080/v1/movies/6033949b54db119a5b2b30b4 -H 'cache-control: no-cache' -H 'content-type: application/json' -d '{ "name" : "The Dark Light" }'
HTTP/1.1 200 OK
Content-Type: text/plain
Date: Mon, 22 Feb 2021 13:09:39 GMT
Content-Length: 20

Updated succesfully!

$ curl -s -w'\n' http://localhost:8080/v1/movies/6033949b54db119a5b2b30b4 | jq '.name'
"The Dark Light"

$ curl -X DELETE -i -w'\n' http://localhost:8080/v1/movies/6033949b54db119a5b2b30b4
HTTP/1.1 200 OK
Content-Type: text/plain
Date: Mon, 22 Feb 2021 13:10:40 GMT
Content-Length: 20

Deleted succesfully!

$ $ curl -i -w'\n' http://localhost:8080/v1/movies/6033949b54db119a5b2b30b4
HTTP/1.1 500 Internal Server Error
Date: Mon, 22 Feb 2021 13:11:32 GMT
Content-Length: 29
Content-Type: text/plain; charset=utf-8

mongo: no documents in result
*/
